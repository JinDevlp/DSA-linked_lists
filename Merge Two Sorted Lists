# 09/14/22

# 21. Merge Two Sorted Lists
"""
You are given the heads of two sorted linked lists list1 and list2.

Merge the two lists in a one sorted list. The list should be made by splicing together the nodes of the first two lists.

Return the head of the merged linked list.

EX:
Input: list1 = [1,2,4], list2 = [1,3,4]
Output: [1,1,2,3,4,4]

Input: list1 = [], list2 = []
Output: []

Input: list1 = [], list2 = [0]
Output: [0]
"""

--------- Code

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next

class Solution:
    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:
        
        # Create a dummy node that could be your starting point with no value and next is           none
        dummy = ListNode()
        tail = dummy 
        
        while list1 and list2: # if list1 and list 2 are not null
            
            if list1.val < list2.val: # if l1 val is smaller than l2 val
                tail.next = list1 # adding l1 value to the tail(dummy)
                list1 = list1.next
                
            else:  # list1.val > list2.val
                tail.next = list2
                list2 = list2.next 
            
            tail = tail.next # we need to update tail no matter
            
        if list1: # if list1 is not null, meanining if there are more nodes in list1
            tail.next = list1 # add list1 nodes to tail
        
        elif list2:
            tail.next = list2
        
        return dummy.next 
            
                
            
        
  
